use std::str::FromStr;
use ast::{Expr, WireDecl, WireWidth, WireValue, BinOpCode, UnOpCode};
use lalrpop_util::ErrorRecovery;

// ErrorRecovery< locationType, tokenType, errorType >
grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

match {
    "&&", // over &
    "||",
    ">=", // over >
    ">>",
    "<=",
    "<<",
    "!=", // over !
    "wire",
    r"0b[01]+" => BIN,
    r"0x[0-9a-fA-F]+" => HEX,
    r"0o[0-7]+" => OCT,
} else {
    r"[0-9]+" => DEC,
} else {
    r"\w+" => ID,
    _
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

WireDecl : WireDecl = {
    <name:ID> ":" <w:DEC> => match WireWidth::from_str(w) {
        Ok(width) => WireDecl { name: String::from(name), width: width },
        Err(_) => {
            panic!() /* FIXME */
        }
    }
};

pub WireDecls : Vec<WireDecl> = {
    "wire" <c:Comma<WireDecl>> ";" => c
};

BinOpAddSub : BinOpCode = {
    "+" => BinOpCode::Add,
    "-" => BinOpCode::Sub,
};

BinOpAnd : BinOpCode = {
    "&" => BinOpCode::And,
};

BinOpXor : BinOpCode = {
    "^" => BinOpCode::Xor,
};

BinOpOr : BinOpCode = {
    "|" => BinOpCode::Or,
};

BinOpMulDiv : BinOpCode = {
    "*" => BinOpCode::Mul,
    "/" => BinOpCode::Div,
};

BinOpCompare : BinOpCode = {
    "==" => BinOpCode::Equal,
    "!=" => BinOpCode::NotEqual,
    "<=" => BinOpCode::LessEqual,
    ">=" => BinOpCode::GreaterEqual,
    "<" => BinOpCode::Less,
    ">" => BinOpCode::Greater,
};

BinOpLogicalAnd : BinOpCode = {
    "&&" => BinOpCode::LogicalAnd,
};

BinOpLogicalOr : BinOpCode = {
    "||" => BinOpCode::LogicalOr,
};

BinOpShift : BinOpCode = {
    "<<" => BinOpCode::LeftShift,
    ">>" => BinOpCode::RightShift,
};

BinTier<Op,NextTier> : Box<Expr> = {
    <l:BinTier<Op,NextTier>> <o:Op> <r:NextTier> =>
        Box::new(Expr::BinOp(o, l, r)),
    NextTier
};

ExprLogicalOr = BinTier<BinOpLogicalOr, ExprLogicalAnd>;
ExprLogicalAnd = BinTier<BinOpLogicalAnd, ExprCompare>;
ExprCompare = BinTier<BinOpCompare, ExprOr>;
ExprOr = BinTier<BinOpOr, ExprXor>;
ExprXor = BinTier<BinOpXor, ExprAnd>;
ExprAnd = BinTier<BinOpAnd, ExprShift>;
ExprShift = BinTier<BinOpShift, ExprAddSub>;
ExprAddSub = BinTier<BinOpAddSub, ExprMulDiv>;
ExprMulDiv = BinTier<BinOpMulDiv, Term>;

UnOp : UnOpCode = {
    "-" => UnOpCode::Negate,
    "~" => UnOpCode::Complement,
};

// FIXME: handle numbers being too large
pub Term : Box<Expr> = {
    DEC => Box::new(Expr::Constant(WireValue::from_decimal(<>))),
    HEX => Box::new(Expr::Constant(WireValue::from_hexadecimal(&<>[2..]))),
    BIN => Box::new(Expr::Constant(WireValue::from_binary(&<>[2..]))),
    "(" <e:Expr> ")" => e,
    <u:UnOp> <t:Term> => Box::new(Expr::UnOp(u, t)),
};

pub Expr: Box<Expr> = {
    ExprLogicalOr,
};
