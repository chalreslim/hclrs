use extprim::u128::u128;
use ast::{Expr, ConstDecl, WireDecl, WireWidth, WireValue, BinOpCode, UnOpCode, MuxOption, Assignment, RegisterBankDecl, RegisterDecl, Statement};
use errors::Error;
use lexer::Tok;
use lalrpop_util::{ErrorRecovery, ParseError};

// ErrorRecovery< locationType, tokenType, errorType >
grammar<'err, 'input>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), Error>>);

extern {
    type Location = usize;
    type Error = Error;

    enum Tok<'input> {
        "&&" => Tok::AndAnd, "||" => Tok::OrOr,

        "==" => Tok::Equal, "!=" => Tok::NotEqual,
        ">=" => Tok::GreaterEqual, ">" => Tok::Greater,
        "<=" => Tok::LessEqual, "<" => Tok::Less,

        "=" => Tok::Assign,
        ">>" => Tok::RightShift, "<<" => Tok::LeftShift,
        "," => Tok::Comma, ";" => Tok::Semicolon,

        "+" => Tok::Plus, "-" => Tok::Minus, "&" => Tok::And, "|" => Tok::Or,
        "^" => Tok::Xor, "*" => Tok::Times, "/" => Tok::Divide, "!" => Tok::Not,

        CONSTANT => Tok::Constant(<WireValue>),

        "(" => Tok::OpenParen, ")" => Tok::CloseParen,
        "{" => Tok::OpenBrace, "}" => Tok::CloseBrace,
        "[" => Tok::OpenBracket, "]" => Tok::CloseBracket,

        ":" => Tok::Colon,
        "~" => Tok::Complement,
        ".." => Tok::DotDot,

        "wire" => Tok::Wire,
        "const" => Tok::Const,
        "register" => Tok::Register,

        ID => Tok::Identifier(<&'input str>),
    }
}

Repeat<delim, T>: Vec<T> = {
    <v:(<T> delim)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Comma<T>: Vec<T> = Repeat<",", T>;

Semicolon<T>: Vec<T> = Repeat<";", T>;

WidthConstant : WireWidth = {
    <start:@L> <constant:CONSTANT> <end:@R> =>? {
        if constant.bits <= u128::new(128) {
            Ok(WireWidth::Bits(constant.bits.low64() as u8))
        } else {
            Err(ParseError::User { error: Error::InvalidWireWidth(start, end) })
        }
    },
};

SimpleConstant : u8 = {
    <start:@L> <constant:CONSTANT> <end:@R> =>? {
        if constant.bits <= u128::new(128) {
            Ok(constant.bits.low64() as u8)
        } else {
            Err(ParseError::User { error: Error::InvalidConstant(start, end) })
        }
    },
};


WireDecl : WireDecl = {
    <name:ID> ":" <width:WidthConstant> =>
        WireDecl { name: String::from(name), width: width },
};

// public for testing
pub WireDecls : Vec<WireDecl> = {
    "wire" <c:Comma<WireDecl>> => c
};

ConstDecl : ConstDecl = {
    <name:ID> "=" <e:Expr> => ConstDecl { name: String::from(name), value: e }
};

// public for testing
pub ConstDecls : Vec<ConstDecl> = {
    "const" <c:Comma<ConstDecl>> => c
};

BinOpAddSub : BinOpCode = {
    "+" => BinOpCode::Add,
    "-" => BinOpCode::Sub,
};

BinOpAnd : BinOpCode = {
    "&" => BinOpCode::And,
};

BinOpXor : BinOpCode = {
    "^" => BinOpCode::Xor,
};

BinOpOr : BinOpCode = {
    "|" => BinOpCode::Or,
};

BinOpMulDiv : BinOpCode = {
    "*" => BinOpCode::Mul,
    "/" => BinOpCode::Div,
};

BinOpCompare : BinOpCode = {
    "==" => BinOpCode::Equal,
    "!=" => BinOpCode::NotEqual,
    "<=" => BinOpCode::LessEqual,
    ">=" => BinOpCode::GreaterEqual,
    "<" => BinOpCode::Less,
    ">" => BinOpCode::Greater,
};

BinOpLogicalAnd : BinOpCode = {
    "&&" => BinOpCode::LogicalAnd,
};

BinOpLogicalOr : BinOpCode = {
    "||" => BinOpCode::LogicalOr,
};

BinOpShift : BinOpCode = {
    "<<" => BinOpCode::LeftShift,
    ">>" => BinOpCode::RightShift,
};

BinTier<Op,NextTier> : Box<Expr> = {
    <l:BinTier<Op,NextTier>> <o:Op> <r:NextTier> =>
        Box::new(Expr::BinOp(o, l, r)),
    NextTier
};

ExprLogicalOr = BinTier<BinOpLogicalOr, ExprLogicalAnd>;
ExprLogicalAnd = BinTier<BinOpLogicalAnd, ExprCompare>;
ExprCompare = BinTier<BinOpCompare, ExprOr>;
ExprOr = BinTier<BinOpOr, ExprXor>;
ExprXor = BinTier<BinOpXor, ExprAnd>;
ExprAnd = BinTier<BinOpAnd, ExprShift>;
ExprShift = BinTier<BinOpShift, ExprAddSub>;
ExprAddSub = BinTier<BinOpAddSub, ExprMulDiv>;
ExprMulDiv = BinTier<BinOpMulDiv, Term>;

UnOp : UnOpCode = {
    "-" => UnOpCode::Negate,
    "~" => UnOpCode::Complement,
    "!" => UnOpCode::Not,
};

MuxOption : MuxOption = {
    <l:Expr> ":" <r:Expr> => MuxOption { condition: l, value: r },
};

MuxOptions = Semicolon<MuxOption>;

SimpleTerm : Box<Expr> = {
    CONSTANT => Box::new(Expr::Constant(<>)),
    "(" <e:Expr> ")" => e,
    "[" <e:MuxOptions> "]" => Box::new(Expr::Mux(e)),
    ID => Box::new(Expr::NamedWire(String::from(<>))),
};

Term : Box<Expr> = {
    <u:UnOp> <t:SimpleTerm> => Box::new(Expr::UnOp(u, t)),
    <e:SimpleTerm> "[" <low:SimpleConstant> ".." <high:SimpleConstant> "]" => {
        Box::new(Expr::BitSelect { from: e, low: low, high: high })
    },
    "(" <l:Term> ".." <r:Term> ")" => Box::new(Expr::Concat(l, r)),
    <e:SimpleTerm> => e,
};

// public for testing
pub Expr: Box<Expr> = {
    ExprLogicalOr,
};

Assignment : Assignment = {
    <n:(<ID> "=")+> <v:Expr> => {
        let mut names: Vec<String> = Vec::new();
        for name in n {
            names.push(String::from(name));
        }
        Assignment { names: names, value: v }
    }
};

RegisterDecl : RegisterDecl = {
    <n:ID> ":" <w:WidthConstant> "=" <e:Expr> => {
        RegisterDecl { name: String::from(n), width: w, default: e }
    },
};

RegisterBankDecl : RegisterBankDecl = {
    "register" <i:ID> "{" <r:Semicolon<RegisterDecl>> "}" => {
        RegisterBankDecl {
            name: String::from(i),
            registers: r,
        }
    }
};


StatementNeedSemi : Statement = {
    Assignment => Statement::Assignment(<>),
    WireDecls => Statement::WireDecls(<>),
    ConstDecls => Statement::ConstDecls(<>),
};

StatementNoSemi : Statement = {
    RegisterBankDecl => Statement::RegisterBankDecl(<>),
};

Statement : Statement = {
    <s:StatementNeedSemi> => s,
    <s:StatementNoSemi> => s,
};

StatementSemicolon : Statement = {
    <s:StatementNeedSemi> ";" => s,
    <s:StatementNoSemi> => s,
};

// Require semicolons between assignments and wire and const declarations, but not
// after register bank declaration
StatementsNotEof : Vec<Statement> = {
    <e:StatementNeedSemi> ";" => {
        let mut v = Vec::new();
        v.push(e);
        v
    },
    <e:StatementNoSemi> => {
        let mut v = Vec::new();
        v.push(e);
        v
    },
    <v:StatementsNotEof> ";" => v,
    <v:StatementsNotEof> <e:StatementNeedSemi> ";" => {
        let mut v = v;
        v.push(e);
        v
    },
    <v:StatementsNotEof> <e:StatementNoSemi> => {
        let mut v = v;
        v.push(e);
        v
    },
};

pub Statements : Vec<Statement> = {
    <v:StatementsNotEof> <e:StatementNeedSemi?> => {
        match e {
            None => v,
            Some(e) => {
                let mut v = v;
                v.push(e);
                v
            }
        }
    }
};
